import logging
import aiohttp
import asyncio
import json
import random
import string
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command, Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import aiofiles

API_TOKEN = '6775113338:AAEelfoW-YxQhfEGjLw1_XCt7lIbVOsSW6g'

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# Загрузка admin_id из файла
with open('admin_id.json', 'r') as f:
    admin_id = json.load(f)["admin_id"]

# Асинхронная загрузка активных ключей
async def load_keys_async():
    try:
        async with aiofiles.open('active_keys.json', 'r') as f:
            return json.loads(await f.read())
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

# Асинхронное сохранение активных ключей
async def save_keys_async():
    async with aiofiles.open('active_keys.json', 'w') as f:
        await f.write(json.dumps(active_keys, indent=4))

active_keys = asyncio.run(load_keys_async())

# Загрузка API токенов
def load_api_tokens():
    try:
        with open('api_tokens.json', 'r') as f:
            data = f.read().strip()
            if data:
                return json.loads(data)
            else:
                return []  # Если файл пуст, вернуть пустой список
    except (FileNotFoundError, json.JSONDecodeError):
        logging.error("Ошибка при загрузке токенов.")
        return []

api_tokens = load_api_tokens()

# Функция выбора случайного токена
def get_random_token():
    if api_tokens:
        return random.choice(api_tokens)  # Случайный выбор токена
    return None

# Кнопки для пользователей и администратора
button_create_link = KeyboardButton(text='Create Link')
button_create_key = KeyboardButton(text='Create Key')
button_reset = KeyboardButton(text='Reset')

markup_user = ReplyKeyboardMarkup(
    keyboard=[
        [button_create_link],
        [button_reset]
    ],
    resize_keyboard=True
)
markup_admin = ReplyKeyboardMarkup(
    keyboard=[
        [button_create_link],
        [button_create_key],
        [button_reset]
    ],
    resize_keyboard=True
)

# Состояния FSM для процесса создания ссылки
class URLState(StatesGroup):
    url = State()
    number = State()

# Проверка валидности ключа
def is_key_valid(user_id):
    key_info = active_keys.get(user_id)
    if key_info:
        key, expiry = key_info
        if expiry > asyncio.get_event_loop().time():
            return True
    return False

# Фильтр для администратора
from aiogram.dispatcher.filters import BoundFilter

class AdminFilter(BoundFilter):
    async def check(self, message: types.Message):
        return message.from_user.id == admin_id

dp.filters_factory.bind(AdminFilter)

# Обработчик команды /start
@dp.message_handler(Command("start"))
async def send_welcome(message: types.Message):
    if message.from_user.id == admin_id:
        await message.reply(
            "Вы администратор. Используйте кнопку 'Create Key' для создания ключа.",
            reply_markup=markup_admin
        )
    else:
        if is_key_valid(message.from_user.id):
            await message.reply(
                "Нажмите на кнопку 'Create Link', чтобы создать короткие ссылки.",
                reply_markup=markup_user
            )
        else:
            await message.reply("Для доступа к боту, пожалуйста, введите активационный ключ.")

# Обработчик создания ключа для администратора
@dp.message_handler(Text(equals="Create Key"), AdminFilter())
async def handle_create_key(message: types.Message):
    if admin_id in active_keys and active_keys[admin_id][1] > asyncio.get_event_loop().time():
        await message.reply("У вас уже есть активный ключ.")
        return
    key = ''.join(random.choices(string.ascii_letters + string.digits, k=8))
    expiry = asyncio.get_event_loop().time() + 86400
    active_keys[admin_id] = (key, expiry)
    await save_keys_async()
    await message.reply(f"Ключ для активации: {key}\nЭтот ключ активен 24 часа.")

# Обработчик создания ссылки
@dp.message_handler(Text(equals="Create Link"))
async def handle_create_link(message: types.Message, state: FSMContext):
    if message.from_user.id != admin_id and not is_key_valid(message.from_user.id):
        await message.reply("Вы не активированы. Введите активационный ключ.")
        return

    await state.finish()
    await message.reply("Введите URL (например, google.com):")
    await state.set_state(URLState.url.state)

# Обработчик кнопки сброса состояния
@dp.message_handler(Text(equals="Reset"))
async def handle_reset(message: types.Message, state: FSMContext):
    await state.finish()
    await message.reply("Вы вернулись на начальный экран.", reply_markup=markup_user)

# Обработчик шага ввода URL
@dp.message_handler(state=URLState.url)
async def process_url(message: types.Message, state: FSMContext):
    if message.text == 'Reset':
        await handle_reset(message, state)
        return

    if not message.text or message.text == 'Create Link':
        await message.reply("Введите корректный URL.")
        return

    await state.update_data(url=message.text)
    await message.reply("Введите количество запросов:")
    await state.set_state(URLState.number.state)

# Функция для выполнения запросов с семафором для ограничения потоков
async def perform_request(session, url, semaphore):
    async with semaphore:  # Ограничиваем количество одновременно выполняемых задач
        api_token = get_random_token()  # Каждый запрос получает новый токен
        if not api_token:
            return None

        post_url = f"https://api.ok.ru/fb.do?application_key=CBAJNKCNEBABABABA&format=json&allow_dupes=true&hide_statistics=true&method=shortlink.create&url={url}&access_token={api_token}"

        async with session.post(post_url) as response:
            return await response.json()

# Обработчик шага ввода количества запросов
@dp.message_handler(state=URLState.number)
async def process_number(message: types.Message, state: FSMContext):
    if message.text == 'Reset':
        await handle_reset(message, state)
        return

    try:
        number = int(message.text)
        if number <= 0:
            await message.reply("Введите положительное число.")
            return
    except ValueError:
        await message.reply("Введите корректное число.")
        return

    data = await state.get_data()
    url = data.get('url')

    if not url:
        await message.reply("Не удалось получить URL. Пожалуйста, введите его снова.")
        return

    links = []

    max_concurrent_tasks = 20  # Ограничение на количество потоков
    semaphore = asyncio.Semaphore(max_concurrent_tasks)

    async with aiohttp.ClientSession() as session:
        tasks = [perform_request(session, url, semaphore) for _ in range(number)]
        results = await asyncio.gather(*tasks)
        links = [result.get('shortUrl') for result in results if result and result.get('shortUrl')]

    file_path = "short_links.txt"
    async with aiofiles.open(file_path, 'w') as f:
        for link in links:
            await f.write(link + '\n')

    await bot.send_document(message.chat.id, types.InputFile(file_path))
    await state.finish()

# Обработчик активации ключа
@dp.message_handler()
async def get_activation_key(message: types.Message):
    if message.from_user.id != admin_id:
        if message.text:
            if message.text in [key for key, _ in active_keys.values()]:
                expiry = asyncio.get_event_loop().time() + 86400
                active_keys[message.from_user.id] = (message.text, expiry)
                await save_keys_async()
                await message.reply("Вы активированы и можете использовать бота.", reply_markup=markup_user)
            else:
                await message.reply("Неверный ключ. Пожалуйста, введите правильный ключ активации.")

# Основная функция для запуска бота
async def main():
    logging.info("Starting bot...")
    try:
        await dp.start_polling()
    except (KeyboardInterrupt, SystemExit):
        logging.info("Bot stopped.")

if __name__ == '__main__':
    asyncio.run(main())
